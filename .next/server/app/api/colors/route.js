"use strict";(()=>{var e={};e.id=466,e.ids=[466],e.modules={11185:e=>{e.exports=require("mongoose")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},32541:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>f,patchFetch:()=>N,requestAsyncStorage:()=>y,routeModule:()=>g,serverHooks:()=>v,staticGenerationAsyncStorage:()=>m});var o={};t.r(o),t.d(o,{DELETE:()=>p,GET:()=>d,POST:()=>u});var n=t(49303),s=t(88716),a=t(60670),l=t(73191),i=t(4202),c=t(87070);async function u(e){let r;console.log("POST request received");try{r=await e.json(),console.log("Received data:",JSON.stringify(r,null,2))}catch(e){return console.error("Error parsing request body:",e),c.NextResponse.json({error:"Invalid JSON in request body"},{status:400})}let{paletteName:t,colors:o}=r;if(!t||!Array.isArray(o)||0===o.length)return console.error("Invalid data structure:",JSON.stringify(r,null,2)),c.NextResponse.json({error:"Invalid data structure. paletteName and non-empty colors array are required."},{status:400});try{await (0,l.Z)(),console.log("Connected to MongoDB");let e=new i.Z({paletteName:t,colors:o});console.log("New palette object created:",JSON.stringify(e.toObject(),null,2));let r=await e.save();return console.log("Palette saved successfully:",JSON.stringify(r.toObject(),null,2)),c.NextResponse.json({message:"Color palette added successfully",palette:r.toObject()},{status:201})}catch(e){return console.error("Error saving palette:",e),"ValidationError"===e.name&&console.error("Validation error details:",JSON.stringify(e.errors,null,2)),c.NextResponse.json({error:"Failed to save color palette",details:e.message},{status:500})}}async function d(){try{await (0,l.Z)();let e=await i.Z.find().sort({createdAt:-1}).limit(10).lean();return c.NextResponse.json({colors:e})}catch(e){return console.error("Error retrieving palettes:",e),c.NextResponse.json({error:"Failed to retrieve color palettes"},{status:500})}}async function p(e){let r=e.nextUrl.searchParams.get("id");return await (0,l.Z)(),await i.Z.findByIdAndDelete(r),c.NextResponse.json({message:"Color deleted successfully"},{status:200})}let g=new n.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/colors/route",pathname:"/api/colors",filename:"route",bundlePath:"app/api/colors/route"},resolvedPagePath:"C:\\Users\\Jackson\\Documents\\projects\\nextjs\\colorpanda\\app\\api\\colors\\route.js",nextConfigOutput:"",userland:o}),{requestAsyncStorage:y,staticGenerationAsyncStorage:m,serverHooks:v}=g,f="/api/colors/route";function N(){return(0,a.patchFetch)({serverHooks:v,staticGenerationAsyncStorage:m})}},73191:(e,r,t)=>{t.d(r,{Z:()=>s});var o=t(11185),n=t.n(o);let s=async()=>{try{if(n().connection.readyState>=1){console.log("Already connected to MongoDB");return}if(!process.env.MONGODB_URI)throw Error("MONGODB_URI is not defined in environment variables");console.log("Connecting to MongoDB..."),await n().connect(process.env.MONGODB_URI,{useNewUrlParser:!0,useUnifiedTopology:!0}),console.log("Connected to MongoDB successfully")}catch(e){throw console.error("Failed to connect to MongoDB:",e),e}}},4202:(e,r,t)=>{t.d(r,{Z:()=>l});var o=t(11185),n=t.n(o);let s=new(n()).Schema({colorName:{type:String,required:!0},hexValue:{type:String,required:!0},rgbValue:{type:String,required:!0}}),a=new(n()).Schema({paletteName:{type:String,required:!0},colors:[s],isSaved:{type:Boolean,default:!0}},{timestamps:!0}),l=n().models.Color||n().model("Color",a)}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),o=r.X(0,[948,972],()=>t(32541));module.exports=o})();